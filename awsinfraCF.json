{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation template for creating an ec2 instance ,App Loadbalancer, targetgroup and security groups ",
    "Parameters": {
        "KeyName": {
            "Description": "Key Pair name",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "CodeCommitTest"
        },
        "InstanceType": {
            "Description": "Select one of the possible instance types",
            "Type": "String",
            "Default": "t2.micro"
        }
        },
        "Resources":{
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties":{
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": "true"
            }
        },
        "Subnet":{
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "CidrBlock": "10.0.1.0/24",
                "MapPublicIpOnLaunch": "true",
                "AvailabilityZone": "us-east-1a"
            }
        },
        "Subnet1":{
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "CidrBlock": "10.0.2.0/24",
                "AvailabilityZone": "us-east-1b"
            }
        },
        "TestTargetGroup":{
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties":{
                "HealthCheckEnabled" : true,
                "HealthCheckIntervalSeconds" : 30,
                "HealthCheckPath" : "/health.html",
                "HealthCheckPort" : 80,
                "HealthCheckProtocol" : "HTTP",
                "Name" : "TestTargetGroup",
                "Port" : 80,
                "Protocol" : "HTTP",
                "TargetType" :"instance",
                "Targets" : [ {"Id": {"Ref": "Server1"}} ],
                "VpcId" : {"Ref": "VPC"}
            }
        },
        "LoadBalancerTest":{
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
              "IpAddressType" : "ipv4",
              "Name" : "SampleLoadBalancer",
              "SecurityGroups" : [ {"Ref": "SecurityGroup" } ],
              "Subnets" : [ {"Ref": "Subnet"},{"Ref": "Subnet1"} ],
              "Type" : "application"
            }
        },
        "InternetGateway":{
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [ {"Key" : "keyname" , "Value" : "IGvalue"}]
            }
        },
        "AttachingIG":{
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "InternetGatewayId" : {"Ref": "InternetGateway"},
                "VpcId" : {"Ref": "VPC"}
            }
        },
        "RouteTableTest" :{
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "Tags" : [ {"Key" : "name" , "Value" : "RTTest"} ],
                "VpcId" : {"Ref": "VPC"}
            }
        },
        "Routesetup":{
            "Type" : "AWS::EC2::Route",
            "Properties":{
                "RouteTableId": {"Ref": "RouteTableTest"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {"Ref": "InternetGateway"}
            }
        },
        "AssociateRoutetable":{
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : {"Ref": "RouteTableTest"},
                "SubnetId" : {"Ref": "Subnet"}
            }
        },
        "LoadBalancerListerner":{
             "Type" : "AWS::ElasticLoadBalancingV2::Listener",
             "Properties" : {
                "LoadBalancerArn" : {"Ref": "LoadBalancerTest"},
                "Port" : 80,
                "Protocol" : "HTTP",
                "DefaultActions" : [ {
                    "TargetGroupArn": {"Ref": "TestTargetGroup"},
                    "Type" : "forward"
                } ]
            }
        },
        "SecurityGroup":{
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "My security group",
                "VpcId": {"Ref": "VPC"},
                "SecurityGroupIngress": [{
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 22,
                    "IpProtocol": "tcp",
                    "ToPort": 22},
                    {
                    "CidrIp":"0.0.0.0/0",
                    "IpProtocol": "tcp",
                    "FromPort": 80,
                    "ToPort": 80
                }],
                "SecurityGroupEgress":[{
                    "IpProtocol": -1,
                    "CidrIp":"0.0.0.0/0"
                }]
            }
        },
        "Server1": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-08bc77a2c7eb2b1da",
                "InstanceType": {"Ref": "InstanceType"},
                "Tags" : [
                    {"Key" : "Name", "Value" : "nginx server"}],
                "KeyName": {"Ref": "KeyName"},
                "SecurityGroupIds": [{"Ref": "SecurityGroup"}],
                "SubnetId": {"Ref": "Subnet"},
                "UserData": { "Fn::Base64" : { "Fn::Join" : [ "\n", ["#!/bin/bash",
                    "apt update -y",
                    "apt install -y nginx",
                    "systemctl nginx start "]]}
            }
        }
        },
        "Server2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-08bc77a2c7eb2b1da",
                "InstanceType": {"Ref": "InstanceType"},
                "Tags" : [
                    {"Key" : "Name", "Value" : "tomcat server"}],
                "KeyName": {"Ref": "KeyName"},
                "SecurityGroupIds": [{"Ref": "SecurityGroup"}],
                "SubnetId": {"Ref": "Subnet"},
                "UserData": { "Fn::Base64" : { "Fn::Join" : [ "\n", ["#!/bin/bash",
                   "apt update -y"]]}                      }
                }
            }
    } 
}
           